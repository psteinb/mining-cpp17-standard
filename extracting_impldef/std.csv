location_sec0,content_sec0,location_sec1,content_sec1,location_sec2,content_sec2,location_sec3,content_sec3,location_sec4,content_sec4,location_sec5,content_sec5,location_impldef,content_impldef
intro.tex:70,\rSec0[intro.defs]{Terms and definitions},intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:149,message belonging to an \impldef{diagnostic message} subset of the
intro.tex:305,\rSec0[intro]{General principles},intro.tex:329,\rSec1[intro.compliance]{Implementation compliance},intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:405,"an operating system, and has an \impldef{required libraries for freestandingimplementation}"
intro.tex:305,\rSec0[intro]{General principles},intro.tex:495,\rSec1[intro.memory]{The \Cpp memory model},intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:508,the number of which is \impldef{bits in a byte}. The least
intro.tex:305,\rSec0[intro]{General principles},intro.tex:754,\rSec1[intro.execution]{Program execution},intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:843,\impldef{interactive device}.
intro.tex:305,\rSec0[intro]{General principles},intro.tex:1146,\rSec1[intro.multithread]{Multi-threaded executions and data races},intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:1167,"below. \end{note} Under a freestanding implementation, it is \impldef{number of"
intro.tex:305,\rSec0[intro]{General principles},intro.tex:1146,\rSec1[intro.multithread]{Multi-threaded executions and data races},intro.tex:1510,\rSec2[intro.progress]{Forward progress},intro.tex:-1,,intro.tex:-1,,intro.tex:-1,,intro.tex:1611,It is \impldef{whether the thread that executes \tcode{main} and the threads created
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:52,\rSec1[lex.phases]{Phases of translation}%,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:64,"\impldef{mapping physical source file characters to basic source character set} manner,"
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:52,\rSec1[lex.phases]{Phases of translation}%,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:67,The set of physical source file characters accepted is \impldef{physical source filecharacters}
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:52,\rSec1[lex.phases]{Phases of translation}%,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:129,"there is no corresponding member, it is converted to an \impldef{convertingcharacters from source character set to execution character set}"
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:52,\rSec1[lex.phases]{Phases of translation}%,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:154,required templates are located. It is \impldef{whether source of translation units mustbe available to locate template definitions}
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:174,\rSec1[lex.charset]{Character sets},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:185,"\impldef{mapping from physical source file characters to basic source character set},"
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:174,\rSec1[lex.charset]{Character sets},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:240,\impldef{execution character set and execution wide-character set}
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:433,\rSec1[lex.header]{Header names},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:468,\impldef{mapping header name to header or external source file} manner to headers or to
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:433,\rSec1[lex.header]{Header names},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:475,"is conditionally-supported with \impldef{meaning of \tcode{'}, \tcode{\textbackslash},"
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1049,\rSec2[lex.ccon]{Character literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1132,and has an \impldef{value of multicharacter literal} value.
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1049,\rSec2[lex.ccon]{Character literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1192,case the value is \impldef{value of wide-character literal with single c-char that isnot in execution wide-character set}
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1049,\rSec2[lex.ccon]{Character literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1197,\impldef{value of wide-character literal containing multiple characters}.
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1049,\rSec2[lex.ccon]{Character literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1217,"Table~\ref{tab:escape.sequences} are conditionally-supported, with \impldef{semantics of"
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1049,\rSec2[lex.ccon]{Character literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1254,The value of a character literal is \impldef{value of character literal outside range ofcorresponding type}
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1049,\rSec2[lex.ccon]{Character literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1255,corresponding type} if it falls outside of the \impldef{range defined for character literals}
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1049,\rSec2[lex.ccon]{Character literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1269,\impldef{encoding of universal character name not in execution character set} encoding.
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1277,\rSec2[lex.fcon]{Floating literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1379,"nearest the scaled value, chosen in an \impldef{choice of larger or smaller value offloating literal}"
lex.tex:2,\rSec0[lex]{Lexical conventions},lex.tex:811,\rSec1[lex.literal]{Literals}%,lex.tex:1396,\rSec2[lex.string]{String literals},lex.tex:-1,,lex.tex:-1,,lex.tex:-1,,lex.tex:1599,conditionally-supported with \impldef{concatenation of some types of string literals}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2431,\rSec2[basic.start.main]{\tcode{main} function},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2441,It is \impldef{defining \tcode{main} in freestanding environment}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2431,\rSec2[basic.start.main]{\tcode{main} function},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2444,\impldef{start-up and termination in freestanding environment}; start-up contains the
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2431,\rSec2[basic.start.main]{\tcode{main} function},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2453,"\tcode{int}, but otherwise its type is \impldef{parameters to \tcode{main}}."
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2431,\rSec2[basic.start.main]{\tcode{main} function},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2486,\impldef{linkage of \tcode{main}}. A program that defines \tcode{main} as
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2592,\rSec2[basic.start.dynamic]{Dynamic initialization of non-local variables},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2658,It is \impldef{dynamic initialization of static variables before \tcode{main}}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2592,\rSec2[basic.start.dynamic]{Dynamic initialization of non-local variables},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2670,It is \impldef{threads and program points at which deferred dynamic initialization is performed}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2592,\rSec2[basic.start.dynamic]{Dynamic initialization of non-local variables},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2701,It is \impldef{dynamic initialization of static variables before \tcode{main}}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2592,\rSec2[basic.start.dynamic]{Dynamic initialization of non-local variables},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2713,It is \impldef{dynamic initialization of static inline variables before \tcode{main}}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2592,\rSec2[basic.start.dynamic]{Dynamic initialization of non-local variables},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2720,It is \impldef{threads and program points at which deferred dynamic initialization is performed}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2592,\rSec2[basic.start.dynamic]{Dynamic initialization of non-local variables},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2724,It is \impldef{dynamic initialization of thread-local variables before entry}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2429,\rSec1[basic.start]{Start and termination},basic.tex:2592,\rSec2[basic.start.dynamic]{Dynamic initialization of non-local variables},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2733,It is \impldef{threads and program points at which deferred dynamic initialization is performed}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2831,\rSec1[basic.stc]{Storage duration},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:2870,\impldef{any use of an invalid pointer other than to perform indirection or deallocate}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:2831,\rSec1[basic.stc]{Storage duration},basic.tex:2939,\rSec2[basic.stc.dynamic]{Dynamic storage duration}%,basic.tex:3141,\rSec3[basic.stc.dynamic.safety]{Safely-derived pointers},basic.tex:-1,,basic.tex:-1,,basic.tex:3226,\impldef{whether an implementation has relaxed or strict pointersafety}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:3498,\rSec1[basic.types]{Types}%,basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:3570,\impldef{values of a trivially copyable type} set of values.\footnote{The
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:3498,\rSec1[basic.types]{Types}%,basic.tex:3701,\rSec2[basic.fundamental]{Fundamental types},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:3715,character literal form of that character. It is \impldef{signedness of \tcode{char}}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:3498,\rSec1[basic.types]{Types}%,basic.tex:3701,\rSec2[basic.fundamental]{Fundamental types},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:3741,char}; which one is \impldef{representation of \tcode{char}}.
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:3498,\rSec1[basic.types]{Types}%,basic.tex:3701,\rSec2[basic.fundamental]{Fundamental types},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:3763,There may also be \impldef{extended signed integer types}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:3498,\rSec1[basic.types]{Types}%,basic.tex:3701,\rSec2[basic.fundamental]{Fundamental types},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:3896,representation of floating-point types is \impldef{value representation offloating-point types}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:3498,\rSec1[basic.types]{Types}%,basic.tex:3939,\rSec2[basic.compound]{Compound types},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:4047,pointer types is \impldef{value representation of pointer types}. Pointers to
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:4333,\rSec1[basic.align]{Alignment},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:4338,may be allocated. An \defn{alignment} is an \impldef{alignment}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:4333,\rSec1[basic.align]{Alignment},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:4370,greater than \tcode{alignof(std::max_align_t)}. It is \impldef{support for extended alignments}
basic.tex:2,\rSec0[basic]{Basic concepts},basic.tex:4333,\rSec1[basic.align]{Alignment},basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:-1,,basic.tex:4383,expression for the fundamental types plus an additional \impldef{alignment additionalvalues}
conversions.tex:2,\rSec0[conv]{Standard conversions},conversions.tex:117,\rSec1[conv.lval]{Lvalue-to-rvalue conversion},conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:182,\impldef{lvalue-to-rvalue conversion of an invalid pointer value}.
conversions.tex:2,\rSec0[conv]{Standard conversions},conversions.tex:408,\rSec1[conv.integral]{Integral conversions},conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:431,the value is \impldef{value of result of unsigned to signed conversion}.
conversions.tex:2,\rSec0[conv]{Standard conversions},conversions.tex:443,\rSec1[conv.double]{Floating-point conversions},conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:452,\impldef{result of inexact floating-point conversion} choice of either of those values.
conversions.tex:2,\rSec0[conv]{Standard conversions},conversions.tex:459,\rSec1[conv.fpint]{Floating-integral conversions},conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:480,"represented exactly, it is an \impldef{value of result of inexact integer tofloating-point conversion}"
conversions.tex:2,\rSec0[conv]{Standard conversions},conversions.tex:611,\rSec1[conv.rank]{Integer conversion rank}%,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:-1,,conversions.tex:651,extended signed integer type with the same size is \impldef{rank of extended signedinteger type}
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:1443,\rSec1[expr.post]{Postfix expressions}%,expressions.tex:1521,\rSec2[expr.call]{Function call},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:1611,It is \impldef{whether the lifetime of a parameter ends when the calleereturns or at the end of the enclosing full-expression}
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:1443,\rSec1[expr.post]{Postfix expressions}%,expressions.tex:1521,\rSec2[expr.call]{Function call},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:1736,\impldef{passing argument of class type through ellipsis} semantics. If the argument has
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:1443,\rSec1[expr.post]{Postfix expressions}%,expressions.tex:2129,\rSec2[expr.typeid]{Type identification},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:2139,\impldef{derived type for \tcode{typeid}} class publicly derived from
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:1443,\rSec1[expr.post]{Postfix expressions}%,expressions.tex:2437,\rSec2[expr.reinterpret.cast]{Reinterpret cast},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:2473,The mapping function is \impldef{mapping of pointer to integer}.
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:1443,\rSec1[expr.post]{Postfix expressions}%,expressions.tex:2437,\rSec2[expr.reinterpret.cast]{Reinterpret cast},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:2492,\impldef{conversions between pointers and integers}.
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:1443,\rSec1[expr.post]{Postfix expressions}%,expressions.tex:2437,\rSec2[expr.reinterpret.cast]{Reinterpret cast},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:2537,"\impldef{converting function pointer to object pointer and vice versa},"
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:2709,\rSec1[expr.unary]{Unary expressions},expressions.tex:2925,\rSec2[expr.sizeof]{Sizeof},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:2943,type~(\ref{basic.fundamental}) is \impldef{\tcode{sizeof} applied to
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:2709,\rSec1[expr.unary]{Unary expressions},expressions.tex:3013,\rSec2[expr.new]{New},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:3208,\impldef{maximum size of an allocated object} limit (Annex~\ref{implimits}); or
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:4060,\rSec1[expr.add]{Additive operators}%,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:4135,the type of the result is an \impldef{type of \tcode{ptrdiff_t}} signed
expressions.tex:2,\rSec0[expr]{Expressions},expressions.tex:4170,\rSec1[expr.shift]{Shift operators},expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:-1,,expressions.tex:4217,\impldef{result of right shift of negative value}.
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:120,is \impldef{meaning of attribute declaration}.
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:242,\rSec1[dcl.spec]{Specifiers}%,declarations.tex:1022,\rSec2[dcl.type]{Type specifiers}%,declarations.tex:1119,\rSec3[dcl.type.cv]{The \grammarterm{cv-qualifier}{s}}%,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:1204,\impldef{semantics of an access through a volatile glvalue}.
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:242,\rSec1[dcl.spec]{Specifiers}%,declarations.tex:1022,\rSec2[dcl.type]{Type specifiers}%,declarations.tex:1223,\rSec3[dcl.type.simple]{Simple type specifiers}%,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:1356,It is \impldef{signedness of \tcode{char}} whether objects of \tcode{char} type are
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:1907,\rSec1[dcl.enum]{Enumeration declarations}%,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:2112,"values, the enumeration is ill-formed. It is \impldef{underlying type for enumeration}"
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:3330,\rSec1[dcl.asm]{The \tcode{asm} declaration}%,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:3344,\impldef{meaning of \tcode{asm} declaration}.
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:3352,\rSec1[dcl.link]{Linkage specifications}%,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:3387,"conditionally-supported, with \impldef{semantics of linkage specifiers} semantics."
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:3352,\rSec1[dcl.link]{Linkage specifications}%,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:3582,defined in \Cpp from other languages is \impldef{linkage of objects between \Cpp and other languages} and
declarations.tex:2,\rSec0[dcl.dcl]{Declarations}%,declarations.tex:3588,\rSec1[dcl.attr]{Attributes}%,declarations.tex:3591,\rSec2[dcl.attr.grammar]{Attribute syntax and semantics},declarations.tex:-1,,declarations.tex:-1,,declarations.tex:-1,,declarations.tex:3730,behavior is \impldef{behavior of non-standard attributes}.
declarators.tex:2,\rSec0[dcl.decl]{Declarators}%,declarators.tex:1980,\rSec1[dcl.fct.def]{Function definitions}%,declarators.tex:1983,\rSec2[dcl.fct.def.general]{In general},declarators.tex:-1,,declarators.tex:-1,,declarators.tex:-1,,declarators.tex:2086,"had been provided, where \grammarterm{function-name} is an \impldef{string resulting"
classes.tex:2,\rSec0[class]{Classes}%,classes.tex:438,\rSec1[class.mem]{Class members}%,classes.tex:1289,\rSec2[class.bit]{Bit-fields}%,classes.tex:-1,,classes.tex:-1,,classes.tex:-1,,classes.tex:1313,\impldef{allocation of bit-fields within a class object}.
classes.tex:2,\rSec0[class]{Classes}%,classes.tex:438,\rSec1[class.mem]{Class members}%,classes.tex:1289,\rSec2[class.bit]{Bit-fields}%,classes.tex:-1,,classes.tex:-1,,classes.tex:-1,,classes.tex:1315,Alignment of bit-fields is \impldef{alignment of bit-fields within a class object}.
templates.tex:2,\rSec0[temp]{Templates}%,templates.tex:-1,,templates.tex:-1,,templates.tex:-1,,templates.tex:-1,,templates.tex:-1,,templates.tex:121,\impldef{semantics of linkage specification on templates} semantics.
templates.tex:2,\rSec0[temp]{Templates}%,templates.tex:4433,\rSec1[temp.spec]{Template instantiation and specialization},templates.tex:4555,\rSec2[temp.inst]{Implicit instantiation},templates.tex:-1,,templates.tex:-1,,templates.tex:-1,,templates.tex:4850,There is an \impldef{maximum depth of recursive template instantiations} quantity
exceptions.tex:2,\rSec0[except]{Exception handling}%,exceptions.tex:436,\rSec1[except.handle]{Handling an exception},exceptions.tex:-1,,exceptions.tex:-1,,exceptions.tex:-1,,exceptions.tex:-1,,exceptions.tex:612,is \impldef{stack unwinding before call to\tcode{std::terminate()}
exceptions.tex:2,\rSec0[except]{Exception handling}%,exceptions.tex:969,\rSec1[except.special]{Special functions},exceptions.tex:980,\rSec2[except.terminate]{The \tcode{std::terminate()} function},exceptions.tex:-1,,exceptions.tex:-1,,exceptions.tex:-1,,exceptions.tex:1062,\impldef{stack unwinding before call to \tcode{std::terminate()}} whether or not the
exceptions.tex:2,\rSec0[except]{Exception handling}%,exceptions.tex:969,\rSec1[except.special]{Special functions},exceptions.tex:980,\rSec2[except.terminate]{The \tcode{std::terminate()} function},exceptions.tex:-1,,exceptions.tex:-1,,exceptions.tex:-1,,exceptions.tex:1070,\impldef{whether stack is unwound before calling \tcode{std::ter\-mi\-nate()}
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:140,\impldef{additional supported forms of preprocessing directive}
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:186,\rSec1[cpp.cond]{Conditional inclusion}%,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:348,is \impldef{numeric values of character literals in \tcode{\#if}
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:186,\rSec1[cpp.cond]{Conditional inclusion}%,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:363,value is \impldef{negative value of character literal in preprocessor}.
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:442,\rSec1[cpp.include]{Source file inclusion},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:462,\impldef{sequence of places searched for a header}
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:442,\rSec1[cpp.include]{Source file inclusion},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:474,is \impldef{search locations for \tcode{<>} header}.
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:442,\rSec1[cpp.include]{Source file inclusion},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:487,\impldef{manner of search for included source file}
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:442,\rSec1[cpp.include]{Source file inclusion},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:526,"preprocessing token is \impldef{search locations for \tcode{""""""""} header}."
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:442,\rSec1[cpp.include]{Source file inclusion},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:546,up to an \impldef{nesting limit for \tcode{\#include} directives} nesting limit.
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:1202,\rSec1[cpp.pragma]{Pragma directive}%,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:1214,in an \impldef{\tcode{\#pragma}} manner.
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:1231,\rSec1[cpp.predefined]{Predefined macro names},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:1261,an \impldef{text of \mname{DATE} when date of translation is not available} valid date
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:1231,\rSec1[cpp.predefined]{Predefined macro names},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:1301,an \impldef{text of \mname{TIME} when time of translation is not available} valid time shall be supplied.
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:1231,\rSec1[cpp.predefined]{Predefined macro names},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:1311,are \impldef{definition and meaning of \mname{STDC}}.
preprocessor.tex:2,\rSec0[cpp]{Preprocessing directives}%,preprocessor.tex:1231,\rSec1[cpp.predefined]{Predefined macro names},preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:-1,,preprocessor.tex:1322,are \impldef{definition and meaning of \mname{STDC_VERSION}}.
lib-intro.tex:2,\rSec0[library]{Library introduction},lib-intro.tex:915,\rSec1[requirements]{Library-wide requirements},lib-intro.tex:935,\rSec2[organization]{Library contents and organization},lib-intro.tex:977,\rSec3[headers]{Headers},lib-intro.tex:-1,,lib-intro.tex:-1,,lib-intro.tex:1179,it is \impldef{whether functions from Annex K of the C standard libraryare declared when \Cpp headers are included}
lib-intro.tex:2,\rSec0[library]{Library introduction},lib-intro.tex:915,\rSec1[requirements]{Library-wide requirements},lib-intro.tex:935,\rSec2[organization]{Library contents and organization},lib-intro.tex:1287,\rSec3[compliance]{Freestanding implementations},lib-intro.tex:-1,,lib-intro.tex:-1,,lib-intro.tex:1300,\impldef{headers for freestanding implementation} set of headers. This set shall
lib-intro.tex:2,\rSec0[library]{Library introduction},lib-intro.tex:915,\rSec1[requirements]{Library-wide requirements},lib-intro.tex:1336,\rSec2[using]{Using the library},lib-intro.tex:1382,\rSec3[using.linkage]{Linkage},lib-intro.tex:-1,,lib-intro.tex:-1,,lib-intro.tex:1401,linkage is \impldef{linkage of names from C standard library}. It is recommended that an
lib-intro.tex:2,\rSec0[library]{Library introduction},lib-intro.tex:915,\rSec1[requirements]{Library-wide requirements},lib-intro.tex:2658,\rSec2[conforming]{Conforming implementations},lib-intro.tex:2802,\rSec3[reentrancy]{Reentrancy},lib-intro.tex:-1,,lib-intro.tex:-1,,lib-intro.tex:2805,"Except where explicitly specified in this document, it is \impldef{which functions inthe \Cpp standard library may be recursively reentered}"
lib-intro.tex:2,\rSec0[library]{Library introduction},lib-intro.tex:915,\rSec1[requirements]{Library-wide requirements},lib-intro.tex:2658,\rSec2[conforming]{Conforming implementations},lib-intro.tex:2909,\rSec3[res.on.exception.handling]{Restrictions on exception handling}%,lib-intro.tex:-1,,lib-intro.tex:-1,,lib-intro.tex:2954,may throw \impldef{exceptions thrown by standard library functions that have apotentially-throwing exception specification}
lib-intro.tex:2,\rSec0[library]{Library introduction},lib-intro.tex:915,\rSec1[requirements]{Library-wide requirements},lib-intro.tex:2658,\rSec2[conforming]{Conforming implementations},lib-intro.tex:2985,\rSec3[value.error.codes]{Value of error codes},lib-intro.tex:-1,,lib-intro.tex:-1,,lib-intro.tex:2992,\impldef{\tcode{error_category} for errors originating outside the
support.tex:2,\rSec0[language.support]{Language support library},support.tex:42,\rSec1[support.types]{Common definitions},support.tex:261,\rSec2[support.types.nullptr]{Null pointers},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:278,is an \impldef{definition of \tcode{NULL}} null pointer constant.%
support.tex:2,\rSec0[language.support]{Language support library},support.tex:42,\rSec1[support.types]{Common definitions},support.tex:288,"\rSec2[support.types.layout]{Sizes, alignments, and offsets}",support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:314,\impldef{type of \tcode{ptrdiff_t}}
support.tex:2,\rSec0[language.support]{Language support library},support.tex:42,\rSec1[support.types]{Common definitions},support.tex:288,"\rSec2[support.types.layout]{Sizes, alignments, and offsets}",support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:320,\impldef{type of \tcode{size_t}}
support.tex:2,\rSec0[language.support]{Language support library},support.tex:1604,\rSec1[support.start.term]{Start and termination},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:1725,an \impldef{exit status}
support.tex:2,\rSec0[language.support]{Language support library},support.tex:1604,\rSec1[support.start.term]{Start and termination},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:1731,an \impldef{exit status} form of the status
support.tex:2,\rSec0[language.support]{Language support library},support.tex:1604,\rSec1[support.start.term]{Start and termination},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:1734,Otherwise the status returned is \impldef{exit status}.\footnote{The macros
support.tex:2,\rSec0[language.support]{Language support library},support.tex:1806,\rSec1[support.dynamic]{Dynamic memory management},support.tex:2506,\rSec2[alloc.errors]{Storage allocation errors},support.tex:2509,\rSec3[bad.alloc]{Class \tcode{bad_alloc}},support.tex:-1,,support.tex:-1,,support.tex:2563,An \impldef{return value of \tcode{bad_alloc::what}} \ntbs.
support.tex:2,\rSec0[language.support]{Language support library},support.tex:1806,\rSec1[support.dynamic]{Dynamic memory management},support.tex:2506,\rSec2[alloc.errors]{Storage allocation errors},support.tex:2573,\rSec3[new.badlength]{Class \tcode{bad_array_new_length}},support.tex:-1,,support.tex:-1,,support.tex:2589,greater than an \impldef{maximum size of an allocated object} limit~(\ref{expr.new}).
support.tex:2,\rSec0[language.support]{Language support library},support.tex:1806,\rSec1[support.dynamic]{Dynamic memory management},support.tex:2506,\rSec2[alloc.errors]{Storage allocation errors},support.tex:2573,\rSec3[new.badlength]{Class \tcode{bad_array_new_length}},support.tex:-1,,support.tex:-1,,support.tex:2609,An \impldef{return value of \tcode{bad_array_new_length::what}} \ntbs.
support.tex:2,\rSec0[language.support]{Language support library},support.tex:2801,\rSec1[support.rtti]{Type identification},support.tex:2825,\rSec2[type.info]{Class \tcode{type_info}},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:2925,An \impldef{return value of \tcode{type_info::name()}} \ntbs.
support.tex:2,\rSec0[language.support]{Language support library},support.tex:2801,\rSec1[support.rtti]{Type identification},support.tex:2934,\rSec2[bad.cast]{Class \tcode{bad_cast}},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:2992,An \impldef{return value of \tcode{bad_cast::what}} \ntbs.
support.tex:2,\rSec0[language.support]{Language support library},support.tex:2801,\rSec1[support.rtti]{Type identification},support.tex:3001,\rSec2[bad.typeid]{Class \tcode{bad_typeid}},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:3059,An \impldef{return value of \tcode{bad_typeid::what}} \ntbs.
support.tex:2,\rSec0[language.support]{Language support library},support.tex:3068,\rSec1[support.exception]{Exception handling},support.tex:3105,\rSec2[exception]{Class \tcode{exception}},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:3188,An \impldef{return value of \tcode{exception::what}} \ntbs.
support.tex:2,\rSec0[language.support]{Language support library},support.tex:3068,\rSec1[support.exception]{Exception handling},support.tex:3200,\rSec2[bad.exception]{Class \tcode{bad_exception}},support.tex:-1,,support.tex:-1,,support.tex:-1,,support.tex:3257,An \impldef{return value of \tcode{bad_exception::what}} \ntbs.
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:2514,\rSec1[optional]{Optional objects},utilities.tex:3527,\rSec2[optional.bad.access]{Class \tcode{bad_optional_access}},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:-1,,utilities.tex:3553,\impldef{return value of \tcode{bad_optional_access::what}}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:4084,\rSec1[variant]{Variants},utilities.tex:4212,\rSec2[variant.variant]{Class template \tcode{variant}},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:-1,,utilities.tex:4298,It is \impldef{whether \tcode{variant} supports over-aligned types}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:4084,\rSec1[variant]{Variants},utilities.tex:5387,\rSec2[variant.bad.access]{Class \tcode{bad_variant_access}},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:-1,,utilities.tex:5420,\returns An \impldef{return value of \tcode{bad_variant_access::what}} \ntbs.
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:5469,\rSec1[any]{Storage for any type},utilities.tex:5516,\rSec2[any.bad_any_cast]{Class \tcode{bad_any_cast}},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:-1,,utilities.tex:5536,\returns An \impldef{return value of \tcode{bad_any_cast::what}} \ntbs.
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:6956,\rSec1[memory]{Memory},utilities.tex:7372,\rSec2[util.dynamic.safety]{Pointer safety},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:-1,,utilities.tex:7484,\impldef{whether \tcode{get_pointer_safety} returns
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:8360,\rSec1[smartptr]{Smart pointers},utilities.tex:9516,\rSec2[util.smartptr]{Shared-ownership pointers},utilities.tex:9518,\rSec3[util.smartptr.weak.bad]{Class \tcode{bad_weak_ptr}},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:9541,\impldef{return value of \tcode{bad_weak_ptr::what}} \ntbs.
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:8360,\rSec1[smartptr]{Smart pointers},utilities.tex:9516,\rSec2[util.smartptr]{Shared-ownership pointers},utilities.tex:9545,\rSec3[util.smartptr.shared]{Class template \tcode{shared_ptr}},utilities.tex:9710,\rSec4[util.smartptr.shared.const]{\tcode{shared_ptr} constructors},utilities.tex:-1,,utilities.tex:9763,"\pnum\throws \tcode{bad_alloc}, or an \impldef{exception type when \tcode{shared_ptr}"
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:8360,\rSec1[smartptr]{Smart pointers},utilities.tex:9516,\rSec2[util.smartptr]{Shared-ownership pointers},utilities.tex:9545,\rSec3[util.smartptr.shared]{Class template \tcode{shared_ptr}},utilities.tex:9710,\rSec4[util.smartptr.shared.const]{\tcode{shared_ptr} constructors},utilities.tex:-1,,utilities.tex:9802,"\pnum\throws  \tcode{bad_alloc}, or an \impldef{exception type when \tcode{shared_ptr}"
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:11105,\rSec1[mem.res]{Memory resources},utilities.tex:11783,\rSec2[mem.res.pool]{Pool resource classes},utilities.tex:11897,\rSec3[mem.res.pool.options]{\tcode{pool_options} data members},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:11915,is greater than an \impldef{largest supported value to configure the maximum number of blocks to replenish a pool}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:11105,\rSec1[mem.res]{Memory resources},utilities.tex:11783,\rSec2[mem.res.pool]{Pool resource classes},utilities.tex:11897,\rSec3[mem.res.pool.options]{\tcode{pool_options} data members},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:11934,is greater than an \impldef{largest supported value to configure the largest allocation satisfied directly by a pool}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:11105,\rSec1[mem.res]{Memory resources},utilities.tex:11783,\rSec2[mem.res.pool]{Pool resource classes},utilities.tex:11988,\rSec3[mem.res.pool.mem]{Pool resource members},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:12032,values of zero will be replaced with \impldef{default configuration of a pool}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:11105,\rSec1[mem.res]{Memory resources},utilities.tex:12105,\rSec2[mem.res.monotonic.buffer]{Class \tcode{monotonic_buffer_resource}},utilities.tex:12173,\rSec3[mem.res.monotonic.buffer.ctor]{\tcode{monotonic_buffer_resource} constructor and destructor},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:12194,\impldef{default \tcode{next_buffer_size} for a \tcode{monotonic_buffer_resource}} size.
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:11105,\rSec1[mem.res]{Memory resources},utilities.tex:12105,\rSec2[mem.res.monotonic.buffer]{Class \tcode{monotonic_buffer_resource}},utilities.tex:12173,\rSec3[mem.res.monotonic.buffer.ctor]{\tcode{monotonic_buffer_resource} constructor and destructor},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:12214,by an \impldef{growth factor for \tcode{monotonic_buffer_resource}} growth factor (which need not be integral).
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:11105,\rSec1[mem.res]{Memory resources},utilities.tex:12105,\rSec2[mem.res.monotonic.buffer]{Class \tcode{monotonic_buffer_resource}},utilities.tex:12229,\rSec3[mem.res.monotonic.buffer.mem]{\tcode{monotonic_buffer_resource} members},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:12284,"by an \impldef{growth factor for \tcode{monotonic_buffer_resource}} growth factor (which need not be integral),"
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:12930,\rSec1[function.objects]{Function objects},utilities.tex:12945,\rSec2[functional.syn]{Header \tcode{<functional>} synopsis},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:-1,,utilities.tex:13025,    // \tcode{\placeholder{M}} is the \impldef{number of placeholders for bind expressions} number of placeholders
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:12930,\rSec1[function.objects]{Function objects},utilities.tex:14230,\rSec2[func.bind]{Function object binders}%,utilities.tex:14417,\rSec3[func.bind.place]{Placeholders},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:14423,  // M is the \impldef{number of placeholders for bind expressions} number of placeholders
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:12930,\rSec1[function.objects]{Function objects},utilities.tex:14230,\rSec2[func.bind]{Function object binders}%,utilities.tex:14417,\rSec3[func.bind.place]{Placeholders},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:14436,constructors shall not throw exceptions. It is \impldef{assignability of placeholderobjects}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:12930,\rSec1[function.objects]{Function objects},utilities.tex:14468,\rSec2[func.wrap]{Polymorphic function wrappers}%,utilities.tex:14475,\rSec3[func.wrap.badcall]{Class \tcode{bad_function_call}}%,utilities.tex:14493,\rSec4[func.wrap.badcall.const]{\tcode{bad_function_call} constructor},utilities.tex:-1,,utilities.tex:14507,\impldef{return value of \tcode{bad_function_call::what}} \ntbs.
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:15248,\rSec1[meta]{Metaprogramming and type traits},utilities.tex:15716,\rSec2[meta.unary]{Unary type traits},utilities.tex:15864,\rSec3[meta.unary.prop]{Type properties},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:16352,\impldef{which scalar types have unique object representations}.
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:15248,\rSec1[meta]{Metaprogramming and type traits},utilities.tex:16562,\rSec2[meta.trans]{Transformations between types},utilities.tex:16799,\rSec3[meta.trans.other]{Other transformations},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:16922,It is \impldef{support for extended alignment} whether any extended alignment is
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:17372,\rSec1[time]{Time utilities},utilities.tex:18888,\rSec2[time.clock]{Clocks},utilities.tex:18895,\rSec3[time.clock.system]{Class \tcode{system_clock}},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:18941,It is \impldef{whether values are rounded or truncated to therequired precision when converting between \tcode{time_t}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:17372,\rSec1[time]{Time utilities},utilities.tex:18888,\rSec2[time.clock]{Clocks},utilities.tex:18895,\rSec3[time.clock.system]{Class \tcode{system_clock}},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:18956,It is \impldef{whether values are rounded or truncated to therequired precision when converting between \tcode{time_t}
utilities.tex:2,\rSec0[utilities]{General utilities library},utilities.tex:19223,\rSec1[execpol]{Execution policies},utilities.tex:19283,\rSec2[execpol.type]{Execution policy type trait},utilities.tex:-1,,utilities.tex:-1,,utilities.tex:-1,,utilities.tex:19299,or \impldef{additional execution policies supported by parallel algorithms}
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:314,\rSec3[char.traits.specializations.char]{\tcode{struct char_traits<char>}},strings.tex:-1,,strings.tex:-1,,strings.tex:365,shall be an \impldef{type of \tcode{streampos}} type that satisfies the requirements for
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:314,\rSec3[char.traits.specializations.char]{\tcode{struct char_traits<char>}},strings.tex:-1,,strings.tex:-1,,strings.tex:372,shall be an \impldef{type of \tcode{streamoff}} type that satisfies the requirements for
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:314,\rSec3[char.traits.specializations.char]{\tcode{struct char_traits<char>}},strings.tex:-1,,strings.tex:-1,,strings.tex:382,\impldef{supported multibyte character encoding rules} set of supported multibyte
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:397,\rSec3[char.traits.specializations.char16_t]{\tcode{struct char_traits<char16_t>}},strings.tex:-1,,strings.tex:-1,,strings.tex:433,shall be an \impldef{type of \tcode{u16streampos}} type that satisfies the requirements
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:397,\rSec3[char.traits.specializations.char16_t]{\tcode{struct char_traits<char16_t>}},strings.tex:-1,,strings.tex:-1,,strings.tex:444,\impldef{return value of \tcode{char_traits<char16_t>::eof}} constant that cannot appear
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:447,\rSec3[char.traits.specializations.char32_t]{\tcode{struct char_traits<char32_t>}},strings.tex:-1,,strings.tex:-1,,strings.tex:483,shall be an \impldef{type of \tcode{u32streampos}} type that satisfies the requirements
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:447,\rSec3[char.traits.specializations.char32_t]{\tcode{struct char_traits<char32_t>}},strings.tex:-1,,strings.tex:-1,,strings.tex:494,\impldef{return value of \tcode{char_traits<char32_t>::eof}} constant that cannot appear as a Unicode
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:497,\rSec3[char.traits.specializations.wchar.t]{\tcode{struct char_traits<wchar_t>}},strings.tex:-1,,strings.tex:-1,,strings.tex:546,shall be an \impldef{type of \tcode{wstreampos}} type that satisfies the requirements
strings.tex:2,\rSec0[strings]{Strings library},strings.tex:32,\rSec1[char.traits]{Character traits},strings.tex:286,\rSec2[char.traits.specializations]{\tcode{char_traits} specializations},strings.tex:497,\rSec3[char.traits.specializations.wchar.t]{\tcode{struct char_traits<wchar_t>}},strings.tex:-1,,strings.tex:-1,,strings.tex:554,and can represent any of the conversion states that can occur in an \impldef{supportedmultibyte character encoding rules}
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:117,\rSec1[locales]{Locales},locales.tex:119,\rSec2[locale]{Class \tcode{locale}},locales.tex:-1,,locales.tex:-1,,locales.tex:-1,,locales.tex:281,object per thread is \impldef{whether locale object is global or per-thread}.
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:117,\rSec1[locales]{Locales},locales.tex:119,\rSec2[locale]{Class \tcode{locale}},locales.tex:286,\rSec3[locale.types]{\tcode{locale} types},locales.tex:289,\rSec4[locale.category]{Type \tcode{locale::category}},locales.tex:-1,,locales.tex:452,\impldef{set of character types that iostreams templates can be instantiated for}
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:117,\rSec1[locales]{Locales},locales.tex:119,\rSec2[locale]{Class \tcode{locale}},locales.tex:579,\rSec3[locale.cons]{\tcode{locale} constructors and destructor},locales.tex:-1,,locales.tex:-1,,locales.tex:636,and any \impldef{locale names} values.
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:117,\rSec1[locales]{Locales},locales.tex:119,\rSec2[locale]{Class \tcode{locale}},locales.tex:866,\rSec3[locale.statics]{\tcode{locale} static members},locales.tex:-1,,locales.tex:-1,,locales.tex:888,"otherwise, the effect on the C locale, if any, is \impldef{effect on C locale of calling\tcode{locale::global}"
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:1041,\rSec1[locale.categories]{Standard \tcode{locale} categories},locales.tex:1090,\rSec2[category.ctype]{The \tcode{ctype} category},locales.tex:1534,\rSec3[facet.ctype.special]{\tcode{ctype} specializations},locales.tex:-1,,locales.tex:-1,,locales.tex:1599,The \impldef{value of \tcode{ctype<char>::table_size}} value of member
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:1041,\rSec1[locale.categories]{Standard \tcode{locale} categories},locales.tex:3510,\rSec2[category.time]{The time category},locales.tex:3534,\rSec3[locale.time.get]{Class template \tcode{time_get}},locales.tex:3761,\rSec4[locale.time.get.virtuals]{\tcode{time_get} virtual functions},locales.tex:-1,,locales.tex:3837,An implementation may also accept additional \impldef{additional formats for \tcode{time_get::do_get_date}} formats.
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:1041,\rSec1[locale.categories]{Standard \tcode{locale} categories},locales.tex:3510,\rSec2[category.time]{The time category},locales.tex:3534,\rSec3[locale.time.get]{Class template \tcode{time_get}},locales.tex:3761,\rSec4[locale.time.get.virtuals]{\tcode{time_get} virtual functions},locales.tex:-1,,locales.tex:3884,\impldef{whether \tcode{time_get::do_get_year} accepts two-digit year numbers} whether
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:1041,\rSec1[locale.categories]{Standard \tcode{locale} categories},locales.tex:3510,\rSec2[category.time]{The time category},locales.tex:3966,\rSec3[locale.time.put]{Class template \tcode{time_put}},locales.tex:4062,\rSec4[locale.time.put.virtuals]{\tcode{time_put} virtual functions},locales.tex:-1,,locales.tex:4083,that are described as depending on the C locale are instead \impldef{formatted charactersequence generated by \tcode{time_put::do_put}
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:1041,\rSec1[locale.categories]{Standard \tcode{locale} categories},locales.tex:4875,\rSec2[category.messages]{The message retrieval category},locales.tex:4882,\rSec3[locale.messages]{Class template \tcode{messages}},locales.tex:4963,\rSec4[locale.messages.virtuals]{\tcode{messages} virtual functions},locales.tex:-1,,locales.tex:4976,\tcode{name} according to an \impldef{mapping from name to catalog when calling
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:1041,\rSec1[locale.categories]{Standard \tcode{locale} categories},locales.tex:4875,\rSec2[category.messages]{The message retrieval category},locales.tex:4882,\rSec3[locale.messages]{Class template \tcode{messages}},locales.tex:4963,\rSec4[locale.messages.virtuals]{\tcode{messages} virtual functions},locales.tex:-1,,locales.tex:5006,to an \impldef{mapping to message when calling \tcode{messages::do_get}} mapping. If no
locales.tex:2,\rSec0[localization]{Localization library},locales.tex:1041,\rSec1[locale.categories]{Standard \tcode{locale} categories},locales.tex:4875,\rSec2[category.messages]{The message retrieval category},locales.tex:4882,\rSec3[locale.messages]{Class template \tcode{messages}},locales.tex:4963,\rSec4[locale.messages.virtuals]{\tcode{messages} virtual functions},locales.tex:-1,,locales.tex:5028,"The limit on such resources, if any, is \impldef{resource limits on a message catalog}."
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:7639,\rSec2[unord.map]{Class template \tcode{unordered_map}}%,containers.tex:7910,\rSec3[unord.map.cnstr]{\tcode{unordered_map} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:7926,the number of buckets is \impldef{default number of buckets in\tcode{unordered_map}
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:7639,\rSec2[unord.map]{Class template \tcode{unordered_map}}%,containers.tex:7910,\rSec3[unord.map.cnstr]{\tcode{unordered_map} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:7954,"provided, the number of buckets is \impldef{default number of buckets in\tcode{unordered_map}"
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:8203,\rSec2[unord.multimap]{Class template \tcode{unordered_multimap}}%,containers.tex:8459,\rSec3[unord.multimap.cnstr]{\tcode{unordered_multimap} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:8475,the number of buckets is \impldef{default number of buckets in\tcode{unordered_multimap}
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:8203,\rSec2[unord.multimap]{Class template \tcode{unordered_multimap}}%,containers.tex:8459,\rSec3[unord.multimap.cnstr]{\tcode{unordered_multimap} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:8503,"provided, the number of buckets is \impldef{default number of buckets in\tcode{unordered_multimap}"
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:8562,\rSec2[unord.set]{Class template \tcode{unordered_set}}%,containers.tex:8796,\rSec3[unord.set.cnstr]{\tcode{unordered_set} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:8812,the number of buckets is \impldef{default number of buckets in\tcode{unordered_set}
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:8562,\rSec2[unord.set]{Class template \tcode{unordered_set}}%,containers.tex:8796,\rSec3[unord.set.cnstr]{\tcode{unordered_set} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:8840,"provided, the number of buckets is \impldef{default number of buckets in\tcode{unordered_set}"
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:8865,\rSec2[unord.multiset]{Class template \tcode{unordered_multiset}}%,containers.tex:9105,\rSec3[unord.multiset.cnstr]{\tcode{unordered_multiset} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:9121,the number of buckets is \impldef{default number of buckets in\tcode{unordered_multiset}
containers.tex:2,\rSec0[containers]{Containers library},containers.tex:7495,\rSec1[unord]{Unordered associative containers},containers.tex:8865,\rSec2[unord.multiset]{Class template \tcode{unordered_multiset}}%,containers.tex:9105,\rSec3[unord.multiset.cnstr]{\tcode{unordered_multiset} constructors},containers.tex:-1,,containers.tex:-1,,containers.tex:9151,"provided, the number of buckets is \impldef{default number of buckets in\tcode{unordered_multiset}"
algorithms.tex:2,\rSec0[algorithms]{Algorithms library},algorithms.tex:1232,\rSec1[algorithms.parallel]{Parallel algorithms},algorithms.tex:1295,\rSec2[algorithms.parallel.exec]{Effect of execution policies on algorithm execution},algorithms.tex:-1,,algorithms.tex:-1,,algorithms.tex:-1,,algorithms.tex:1334,\impldef{forward progress guarantees for implicit threads of parallel algorithms (if not defined for \tcode{thread})}.
algorithms.tex:2,\rSec0[algorithms]{Algorithms library},algorithms.tex:1232,\rSec1[algorithms.parallel]{Parallel algorithms},algorithms.tex:1295,\rSec2[algorithms.parallel.exec]{Effect of execution policies on algorithm execution},algorithms.tex:-1,,algorithms.tex:-1,,algorithms.tex:-1,,algorithms.tex:1452,\impldef{additional execution policies supported by parallel algorithms} type are
algorithms.tex:2,\rSec0[algorithms]{Algorithms library},algorithms.tex:1232,\rSec1[algorithms.parallel]{Parallel algorithms},algorithms.tex:1295,\rSec2[algorithms.parallel.exec]{Effect of execution policies on algorithm execution},algorithms.tex:-1,,algorithms.tex:-1,,algorithms.tex:-1,,algorithms.tex:1453,\impldef{semantics of parallel algorithms invoked withimple\-men\-tation-defined execution policies}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:152,\rSec1[cfenv]{The floating-point environment},numerics.tex:153,\rSec2[cfenv.syn]{Header \tcode{<cfenv>} synopsis},numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:223,it is \impldef{whether pragma \tcode{FENV_ACCESS} is supported}~(\ref{cpp.pragma})
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:152,\rSec1[cfenv]{The floating-point environment},numerics.tex:153,\rSec2[cfenv.syn]{Header \tcode{<cfenv>} synopsis},numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:225,it is \impldef{whether \tcode{<cfenv>} functions can be used to manage floating-point status}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:247,\rSec1[complex.numbers]{Complex numbers},numerics.tex:1021,\rSec2[complex.transcendentals]{\tcode{complex} transcendentals},numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:1200,"is \impldef{value of \tcode{pow(0,0)}}."
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:3626,\rSec2[rand.predef]{Engines and engine adaptors with predefined parameters}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:3776,using default_random_engine = @\textit{\impldef{type of \tcode{default_random_engine}}}@;
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:3626,\rSec2[rand.predef]{Engines and engine adaptors with predefined parameters}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:3783,is \impldef{type of \tcode{default_random_engine}}.
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:3813,\rSec2[rand.device]{Class \tcode{random_device}}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:3864, \impldef{semantics and default value of \tcode{token} parameter to \tcode{random_device} constructor}.%
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:3813,\rSec2[rand.device]{Class \tcode{random_device}}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:3871,\throws A value of an \impldef{exception type when \tcode{random_device} constructor fails} type
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:3813,\rSec2[rand.device]{Class \tcode{random_device}}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:3906, It is \impldef{how \tcode{random_device::operator()} generates values}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:3813,\rSec2[rand.device]{Class \tcode{random_device}}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:3910,\throws A value of an \impldef{exception type when \tcode{random_device::operator()} fails}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:4229,\rSec2[rand.dist]{Random number distribution class templates}%,numerics.tex:4232,\rSec3[rand.dist.general]{In general},numerics.tex:-1,,numerics.tex:-1,,numerics.tex:4255,\impldef{algorithms for producing the standard random number distributions}.
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:1377,\rSec1[rand]{Random number generation},numerics.tex:6386,\rSec2[c.math.rand]{Low-quality random number generation},numerics.tex:-1,,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:6415,It is \impldef{whether \tcode{rand} may introduce a data race}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:10618,\rSec3[sf.cmath.assoc_laguerre]{Associated Laguerre polynomials}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:10651,is \impldef{effect of calling associated Laguerre polynomials with \tcode{n >= 128} or \tcode{m >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:10655,\rSec3[sf.cmath.assoc_legendre]{Associated Legendre functions}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:10691,is \impldef{effect of calling associated Legendre polynomials with \tcode{l >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:10822,\rSec3[sf.cmath.cyl_bessel_i]{Regular modified cylindrical Bessel functions}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:10857,is \impldef{effect of calling regular modified cylindrical Bessel functions with \tcode{nu >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:10863,\rSec3[sf.cmath.cyl_bessel_j]{Cylindrical Bessel functions of the first kind}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:10896,is \impldef{effect of calling cylindrical Bessel functions of the first kind with \tcode{nu >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:10900,\rSec3[sf.cmath.cyl_bessel_k]{Irregular modified cylindrical Bessel functions}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:10950,is \impldef{effect of calling irregular modified cylindrical Bessel functions with \tcode{nu >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:10956,\rSec3[sf.cmath.cyl_neumann]{Cylindrical Neumann functions}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:11001,is \impldef{effect of calling cylindrical Neumann functions with \tcode{nu >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:11134,\rSec3[sf.cmath.hermite]{Hermite polynomials}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:11165,is \impldef{effect of calling Hermite polynomials with \tcode{n >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:11169,\rSec3[sf.cmath.laguerre]{Laguerre polynomials}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:11201,is \impldef{effect of calling Laguerre polynomials with \tcode{n >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:11205,\rSec3[sf.cmath.legendre]{Legendre polynomials}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:11239,is \impldef{effect of calling Legendre polynomials with \tcode{l >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:11289,\rSec3[sf.cmath.sph_bessel]{Spherical Bessel functions of the first kind}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:11321,is \impldef{effect of calling spherical Bessel functions with \tcode{n >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:11327,\rSec3[sf.cmath.sph_legendre]{Spherical associated Legendre functions}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:11369,is \impldef{effect of calling spherical associated Legendre functions with \tcode{l >= 128}}
numerics.tex:2,\rSec0[numerics]{Numerics library},numerics.tex:9714,\rSec1[c.math]{Mathematical functions for floating-point types},numerics.tex:10568,\rSec2[sf.cmath]{Mathematical special functions}%,numerics.tex:11375,\rSec3[sf.cmath.sph_neumann]{Spherical Neumann functions}%,numerics.tex:-1,,numerics.tex:-1,,numerics.tex:11408,is \impldef{effect of calling spherical Neumann functions with \tcode{n >= 128}}
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:51,\rSec1[iostreams.requirements]{Iostreams requirements},iostreams.tex:70,\rSec2[iostreams.limits.pos]{Positioning type limitations},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:91,\impldef{behavior of iostream classes when \tcode{traits::pos_type} is not
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:51,\rSec1[iostreams.requirements]{Iostreams requirements},iostreams.tex:70,\rSec2[iostreams.limits.pos]{Positioning type limitations},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:97,and any other \impldef{set of character types that iostreams templates can be instantiated for}
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:624,\rSec1[iostreams.base]{Iostreams base classes},iostreams.tex:739,\rSec2[ios.base]{Class \tcode{ios_base}},iostreams.tex:1355,\rSec3[ios.members.static]{\tcode{ios_base} static members},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:1377,\impldef{effect of calling \tcode{ios_base::sync_with_stdio} after
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:624,\rSec1[iostreams.base]{Iostreams base classes},iostreams.tex:1752,\rSec2[ios]{Class template \tcode{basic_ios}},iostreams.tex:2176,\rSec3[iostate.flags]{\tcode{basic_ios} flags functions},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:2232,\impldef{argument values to construct \tcode{basic_ios::failure}}
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:4039,\rSec1[iostream.format]{Formatting and manipulators},iostreams.tex:5700,\rSec2[output.streams]{Output streams},iostreams.tex:6081,\rSec3[ostream.formatted]{Formatted output functions},iostreams.tex:6263,\rSec4[ostream.inserters]{\tcode{basic_ostream::operator<<}},iostreams.tex:-1,,iostreams.tex:6388,"\impldef{NTCTS in \tcode{basic_ostream<charT, traits>\& op\-er\-ator<<(nullptr_t)}}"
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:7192,\rSec1[string.streams]{String-based streams},iostreams.tex:7254,\rSec2[stringbuf]{Class template \tcode{basic_stringbuf}},iostreams.tex:7334,\rSec3[stringbuf.cons]{\tcode{basic_stringbuf}  constructors},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:7383,\impldef{whether sequence pointers are copied by \tcode{basic_stringbuf} move
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:7192,\rSec1[string.streams]{String-based streams},iostreams.tex:7254,\rSec2[stringbuf]{Class template \tcode{basic_stringbuf}},iostreams.tex:7502,\rSec3[stringbuf.virtuals]{Overridden virtual functions},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:7759,"\impldef{effect of calling \tcode{basic_streambuf::setbuf} with nonzero arguments},"
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:8340,\rSec1[file.streams]{File-based streams},iostreams.tex:8406,\rSec2[filebuf]{Class template \tcode{basic_filebuf}},iostreams.tex:8514,\rSec3[filebuf.cons]{\tcode{basic_filebuf} constructors},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:8542,is \impldef{whether sequence pointers are copied by \tcode{basic_filebuf} move
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:8340,\rSec1[file.streams]{File-based streams},iostreams.tex:8406,\rSec2[filebuf]{Class template \tcode{basic_filebuf}},iostreams.tex:8793,\rSec3[filebuf.virtuals]{Overridden virtual functions},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:9007,Otherwise the results are \impldef{effect of calling \tcode{basic_filebuf::setbuf} with
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:8340,\rSec1[file.streams]{File-based streams},iostreams.tex:8406,\rSec2[filebuf]{Class template \tcode{basic_filebuf}},iostreams.tex:8793,\rSec3[filebuf.virtuals]{Overridden virtual functions},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:9145,"If a get area exists, the effect is \impldef{effect of calling\tcode{basic_filebuf::sync}"
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:9961,\rSec2[fs.conformance]{Conformance},iostreams.tex:9995,\rSec3[fs.conform.os]{Operating system dependent behavior conformance},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:10000,\impldef{operating system on which implementation depends}.
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:10219,\rSec2[fs.filesystem.syn]{Header \tcode{<filesystem>} synopsis},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:10445,\tcode{\textit{trivial-clock}} is an \impldef{type of filesystem trivial clock} type
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:10506,\rSec2[fs.class.path]{Class \tcode{path}},iostreams.tex:10683,\rSec3[fs.path.generic]{Generic pathname format},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:10685,\def\impldefrootname{\impldef{supported \grammarterm{root-name}{s} in addition to
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:10506,\rSec2[fs.class.path]{Class \tcode{path}},iostreams.tex:10683,\rSec3[fs.path.generic]{Generic pathname format},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:10752,relative to \grammarterm{root-directory} is \impldef{meaning of \grammarterm{dot-dot} in \grammarterm{root-directory}}.
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:12387,\rSec2[fs.enum]{Enumerations},iostreams.tex:12389,\rSec3[fs.enum.path.format]{Enum \tcode{path::format}},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:12403,  \impldef{interpretation of the path character sequence with format \tcode{path::auto_format}}.
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:12387,\rSec2[fs.enum]{Enumerations},iostreams.tex:12412,\rSec3[fs.enum.file_type]{Enum class \tcode{file_type}},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:12440,\tcode{\textit{\impldef{additional \tcode{file_type} enumerators
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:12387,\rSec2[fs.enum]{Enumerations},iostreams.tex:12412,\rSec3[fs.enum.file_type]{Enum class \tcode{file_type}},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:12445,\impldef{additional \tcode{file_type} enumerators
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:13196,\rSec2[fs.class.directory_iterator]{Class \tcode{directory_iterator}},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:13204,or in an \impldef{type of a directory-like file} directory-like file type.
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:13421,\rSec2[fs.class.rec.dir.itr]{Class \tcode{recursive_directory_iterator}},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:13427,directory or in an \impldef{type of a directory-like file} directory-like file
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:13759,\rSec2[fs.op.funcs]{Filesystem operation functions},iostreams.tex:13847,\rSec3[fs.op.copy]{Copy},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:13906,\impldef{effect of \tcode{filesystem::copy}}.
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:13759,\rSec2[fs.op.funcs]{Filesystem operation functions},iostreams.tex:14417,\rSec3[fs.op.file_size]{File size},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:14436,"  Otherwise, the result is \impldef{result of \tcode{filesystem::file_size}}."
iostreams.tex:2,\rSec0[input.output]{Input/output library},iostreams.tex:9953,\rSec1[filesystems]{File systems},iostreams.tex:13759,\rSec2[fs.op.funcs]{Filesystem operation functions},iostreams.tex:15063,\rSec3[fs.op.status]{Status},iostreams.tex:-1,,iostreams.tex:-1,,iostreams.tex:15156,      \impldef{file type of the file argument of \tcode{filesystem::status}} file type.
regex.tex:3,\rSec0[re]{Regular expressions library},regex.tex:623,\rSec1[re.const]{Namespace \tcode{std::regex_constants}},regex.tex:633,\rSec2[re.synopt]{Bitmask type \tcode{syntax_option_type}},regex.tex:-1,,regex.tex:-1,,regex.tex:-1,,regex.tex:665,The type \tcode{syntax_option_type} is an \impldef{type of \tcode{syntax_option_type}} bitmask
regex.tex:3,\rSec0[re]{Regular expressions library},regex.tex:623,\rSec1[re.const]{Namespace \tcode{std::regex_constants}},regex.tex:761,\rSec2[re.matchflag]{Bitmask type \tcode{match_flag_type}},regex.tex:-1,,regex.tex:-1,,regex.tex:-1,,regex.tex:800,\impldef{type of \tcode{regex_constants::match_flag_type}} bitmask type~(\ref{bitmask.types}).
regex.tex:3,\rSec0[re]{Regular expressions library},regex.tex:623,\rSec1[re.const]{Namespace \tcode{std::regex_constants}},regex.tex:897,\rSec2[re.err]{Implementation-defined \tcode{error_type}},regex.tex:-1,,regex.tex:-1,,regex.tex:-1,,regex.tex:922,The type \tcode{error_type} is an \impldef{type of
threads.tex:2,\rSec0[thread]{Thread support library},threads.tex:21,\rSec1[thread.req]{Requirements},threads.tex:60,\rSec2[thread.req.native]{Native handles},threads.tex:-1,,threads.tex:-1,,threads.tex:-1,,threads.tex:65,\impldef{presence and meaning of \tcode{native_handle_type} and \tcode{native_handle}}.
